html {
    box-sizing: border-box;
}

*, *:before, *:after {
    box-sizing: inherit;
}

header {
	margin: 3rem;
	margin-right: 2rem;
}

header#header {
	margin: 2rem;
}

header > * {
	border-bottom: 1px solid black;
}

#table-container {
	display: flex;
	justify-content: center;
	align-items: center;
}

table {
	width: 75%;
	/* border-collapse: collapse; will make the borders of the table cells all line up */
	border-collapse: collapse;
}

thead {
	/* border-bottom: 1px solid black; */
	/* text-decoration: underline; */
	background-color: gainsboro;
}

table, th, td {
	border: 1px solid black;
}

#form-container {
	display: flex;
	justify-content: center;
	align-items: center;
}

#box-shadow-container, #text-shadow-container, #transition-container, #animation-container, #icon-container, #svg-container {
	display: flex;
	align-items: center;
	justify-content: space-evenly;
}

#box-shadow-container > figure {
	border: 1px solid aquamarine;
	/* box-shadow: x-offset y-offset blur-radius color; */
	box-shadow: -15px -15px 10px aquamarine;
	/* x-offset: what amount is the horizontal offset
	y-offset: what amount is the vertical offset
	blur-radius: how blurry is the shadow? the higher the value here, the blurrier it will be
	color: what css color will the shadow be */
}

#text-shadow-container > figure {
	/* text-shadow works much like border shadow, only on the text instead of the element's border */
	text-shadow: 2px 2px 5px;
}

/* the :hover pseudo selector will apply this styling when the cursor is hovering over the element */
#button-1:hover {
	color: red;
	font-size: xx-large;
	margin-left: 10rem;
}

#button-1 {
	/* transition-duration is how long a transition (for instance between hovering and not hovering) will last */
	transition-duration: 5s;
}

#button-2 {
	text-decoration: none;
	border: 1px solid black;
	border-radius: 2px;
	padding: 2px;
	color: black;
	/* be careful with long transition-duration times, you generally want them to be quick */
	transition-duration: .25s;
}

#button-2:hover {
	background-color: chartreuse;
}

/* use the @keyframes keyword to declare an animations */
@keyframes spin {
	/* where does the animation start */
	from {
		transform: rotate(0deg);
	}
	/* where does the animation end */
	to {
		transform: rotate(360deg);
	}
}

#square {
	width: 200px;
	height: 200px;
	background-color: goldenrod;

	/* the @keyframes-declared spin animation is used for animation-name */
	animation-name: spin;
	/* how long the animation will take */
	animation-duration: 3s;
	/* animation-iteration-count is how many times the animation runs */
	animation-iteration-count: infinite;
	/* animation-timing-function is ease-in-out by default, it determines at what rate the animation moves through
	the different animated properites.  a linear animation always animates at the same rate */
	animation-timing-function: linear;
}

body {
	padding-bottom: 5rem;
}

i {
	font-size: xx-large;
}

svg {
	color: black;
}